container.bootcamp {
  einbuchen {
    url = "${CONTAINER_BOOTCAMP_EINBUCHEN_URL}"
  }
  ausleihen {
    url = "${CONTAINER_BOOTCAMP_AUSLEIHEN_URL}"
  }
}
pg-persistence {

  db {
    user = "${CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_USER}"
    password = "${CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_PASSWORD}"
    host = "${CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_HOST}"
    name = "${CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_DBNAME}"

  }
}
akka{
    persistence{
        journal {
            plugin = "akka.persistence.journal.postgresql"
            postgresql {
                # qualified type name of the PostgreSql persistence journal actor
                class = "Akka.Persistence.PostgreSql.Journal.PostgreSqlJournal, Akka.Persistence.PostgreSql"

                # dispatcher used to drive journal actor
                plugin-dispatcher = "akka.actor.default-dispatcher"

                # connection string used for database access
                connection-string = "host="${pg-persistence.db.host}";database="${pg-persistence.db.name}";password="${pg-persistence.db.password}";username="${pg-persistence.db.user}


                # default SQL commands timeout
                connection-timeout = 30s

                # PostgreSql schema name to table corresponding with persistent journal
                schema-name = public

                # PostgreSql table corresponding with persistent journal
                table-name = journal

                # should corresponding journal table be initialized automatically
                auto-initialize = on

                # timestamp provider used for generation of journal entries timestamps
                timestamp-provider = "Akka.Persistence.Sql.Common.Journal.DefaultTimestampProvider, Akka.Persistence.Sql.Common"

                # metadata table
                metadata-table-name = metadata

                # defines column db type used to store payload. Available option: BYTEA (default), JSON, JSONB
                stored-as = JSONB

                event-adapters {
                    reserve-tagger = "reservieren.Models.ReserveEventAdapter, reservieren"
                }
                event-adapter-bindings = {
                    "reservieren.Models.Book+BookReservedUpdated, reservieren" = reserve-tagger
                }
            }
        }

        snapshot-store {
            plugin = "akka.persistence.snapshot-store.postgresql"
            postgresql {
                # qualified type name of the PostgreSql persistence journal actor
                class = "Akka.Persistence.PostgreSql.Snapshot.PostgreSqlSnapshotStore, Akka.Persistence.PostgreSql"

                # dispatcher used to drive journal actor
                plugin-dispatcher = ""akka.actor.default-dispatcher""

                # connection string used for database access
                connection-string = "host="${pg-persistence.db.host}";database="${pg-persistence.db.name}";password="${pg-persistence.db.password}";username="${pg-persistence.db.user}

                # default SQL commands timeout
                connection-timeout = 30s

                # PostgreSql schema name to table corresponding with persistent journal
                schema-name = public

                # PostgreSql table corresponding with persistent journal
                table-name = snapshot

                # should corresponding journal table be initialized automatically
                auto-initialize = on

                # defines column db type used to store payload. Available option: BYTEA (default), JSON, JSONB
                stored-as = JSONB
            }
        }
        query.journal.sql {
            # Implementation class of the SQL ReadJournalProvider
            class = "Akka.Persistence.Query.Sql.SqlReadJournalProvider, Akka.Persistence.Query.Sql"

            # Absolute path to the write journal plugin configuration entry that this
            # query journal will connect to.
            # If undefined (or "") it will connect to the default journal as specified by the
            # akka.persistence.journal.plugin property.
            write-plugin = ""

            # The SQL write journal is notifying the query side as soon as things
            # are persisted, but for efficiency reasons the query side retrieves the events
            # in batches that sometimes can be delayed up to the configured `refresh-interval`.
            refresh-interval = 3s

            # How many events to fetch in one query (replay) and keep buffered until they
            # are delivered downstreams.
            max-buffer-size = 100
        }
    }
}
