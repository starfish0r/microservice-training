---

apiVersion: v1
kind: ConfigMap
metadata:
  name: varnish-for-reservieren
data:
  default.vcl: |-
    vcl 4.0;
    backend default {
        .host = "localhost";
        .port = "80";
    }
    backend assets {
        .host = "assets";
        .port = "80";
    }
    sub vcl_backend_response {
        set beresp.do_esi = true;
    }
    sub vcl_recv {
        if (req.http.host == "assets") {
            set req.backend_hint = assets;
        } else {
            set req.backend_hint = default;
        }
    }

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: reservieren-config
data:
  CONTAINER_BOOTCAMP_EINBUCHEN_URL: "http://einbuchen-intern:80/events"
  CONTAINER_BOOTCAMP_AUSLEIHEN_URL: "http://ausleihen-intern:80/events"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_USER: "postgres"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_PASSWORD: "PpOoSsTtGgRrEeSs"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_HOST: "pgpool"
  CONTAINER_BOOTCAMP_AKKA_PERSISTENCE_DBNAME: "reservieren"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: reservieren-pg-init-config
data:
  DB_SUPERUSER: "postgres"
  DB_SUPERUSER_PASSWORD: "PpOoSsTtGgRrEeSs"
  DB_NAME: "reservieren"
  DB_LOCALE: "de_DE.utf-8"
  DB_HOST: "pgpool"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: reservieren-pg-init-scripts
data:
  reservieren-init-db.sh: |
    #!/usr/bin/env bash

    #set -x
    set -e

    DB_LOCALE=${DB_LOCALE:?"DB_LOCALE is required"}

    DB_HOST=${DB_HOST:?"DB_HOST is required"}
    DB_SUPERUSER=${DB_SUPERUSER:?"DB_SUPERUSER is required"}
    DB_SUPERUSER_PASSWORD=${DB_SUPERUSER_PASSWORD:?"DB_SUPERUSER_PASSWORD is required"}
    DB_NAME=${DB_NAME:?"DB_NAME is required"}

    echo ${DB_HOST}":*:*:"${DB_SUPERUSER}":"${DB_SUPERUSER_PASSWORD} > ~/.pgpass
    chmod 0600 ~/.pgpass

    PG_DB_EXISTS=`psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "SELECT EXISTS ( SELECT 1 from pg_database WHERE datname='${DB_NAME}');"`
    
    PG_COLLATION_EXISTS=`psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "SELECT EXISTS( select 1 from pg_collation);"`
    if test ${PG_COLLATION_EXISTS} = "f"; then
      psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "CREATE COLLATION IF NOT EXISTS german (LOCALE = '${DB_LOCALE}');"
    fi

    if test ${PG_DB_EXISTS} = "f"; then
      psql -U ${DB_SUPERUSER} -h ${DB_HOST} -tAc "CREATE DATABASE ${DB_NAME} WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = '${DB_LOCALE}' LC_CTYPE = '${DB_LOCALE}';"
    fi

---

apiVersion: v1
kind: Service
metadata:
  name: reservieren-extern
spec:
  ports:
  - port: 80
    targetPort: 8080
    name: web
  selector:
    app: reservieren
    role: backend
    scs: reservieren
    
---

## FÃ¼r das interne SSE Interface
apiVersion: v1
kind: Service
metadata:
  name: reservieren-intern
spec:
  ports:
  - port: 80
    name: web
  selector:
    app: reservieren
    role: backend
    scs: reservieren    

---

#####
# ingress to assets, test f.e. with
# curl http://bootcamp.ch.innoq.io/einbuchen/books
#####

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: reservieren
spec:
  rules:
  - host: 3.g.ch.innoq.io
    http:
      paths:
      - path: /reservieren
        backend:
          serviceName: reservieren-extern
          servicePort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reservieren
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reservieren
      role: backend
      scs: reservieren
  template:
    metadata:
      labels:
        app: reservieren
        role: backend
        scs: reservieren
    spec:
      initContainers:
      - name: ausleihen-postgres-init
        image: quay.io/containerbootcamp/postgres-init
        envFrom:
        - configMapRef:
            name: reservieren-pg-init-config
        volumeMounts:
        - name: reservieren-init-scripts
          mountPath: /pg-init    
      containers:
      - name: varnish-esi
        image: million12/varnish
        env:
          - name: VCL_CONFIG
            value: /etc/varnish/default.vcl
          - name: VARNISHD_PARAMS
            value: -a 0.0.0.0:8080
        volumeMounts:
          - name: varnish-config-volume
            mountPath: /etc/varnish/
      - name: reservieren
        image: containerbootcamp/reservieren
        envFrom:
        - configMapRef:
            name: reservieren-config
        ports:
        - containerPort: 80
          protocol: TCP
      volumes:
      - name: reservieren-init-scripts
        configMap:
          name: reservieren-pg-init-scripts
      - name: varnish-config-volume
        configMap:
          name: varnish-for-reservieren
